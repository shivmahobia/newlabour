// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/types.js"

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}


// Validate ../../app/(All Pages)/About/Feedback/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/About/Feedback">> = Specific
  const handler = {} as typeof import("../../app/(All Pages)/About/Feedback/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(All Pages)/About/MissionVision/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/About/MissionVision">> = Specific
  const handler = {} as typeof import("../../app/(All Pages)/About/MissionVision/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(All Pages)/About/Organization/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/About/Organization">> = Specific
  const handler = {} as typeof import("../../app/(All Pages)/About/Organization/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(All Pages)/About/WhoisWho/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/About/WhoisWho">> = Specific
  const handler = {} as typeof import("../../app/(All Pages)/About/WhoisWho/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(All Pages)/CessLogin/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/CessLogin">> = Specific
  const handler = {} as typeof import("../../app/(All Pages)/CessLogin/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(All Pages)/ContactUs/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/ContactUs">> = Specific
  const handler = {} as typeof import("../../app/(All Pages)/ContactUs/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(All Pages)/Department/Division/Cell/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/Department/Division/Cell">> = Specific
  const handler = {} as typeof import("../../app/(All Pages)/Department/Division/Cell/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(All Pages)/EodbServices/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/EodbServices">> = Specific
  const handler = {} as typeof import("../../app/(All Pages)/EodbServices/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(All Pages)/Grievances/ComplaintStatus/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/Grievances/ComplaintStatus">> = Specific
  const handler = {} as typeof import("../../app/(All Pages)/Grievances/ComplaintStatus/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(All Pages)/Grievances/OnlineComplaint/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/Grievances/OnlineComplaint">> = Specific
  const handler = {} as typeof import("../../app/(All Pages)/Grievances/OnlineComplaint/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(All Pages)/HelpSupport/UpdateEvents/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/HelpSupport/UpdateEvents">> = Specific
  const handler = {} as typeof import("../../app/(All Pages)/HelpSupport/UpdateEvents/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(All Pages)/Login/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/Login">> = Specific
  const handler = {} as typeof import("../../app/(All Pages)/Login/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(All Pages)/Media/Gallery/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/Media/Gallery">> = Specific
  const handler = {} as typeof import("../../app/(All Pages)/Media/Gallery/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(All Pages)/Reports/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/Reports">> = Specific
  const handler = {} as typeof import("../../app/(All Pages)/Reports/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(All Pages)/Resources/ActRule/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/Resources/ActRule">> = Specific
  const handler = {} as typeof import("../../app/(All Pages)/Resources/ActRule/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(All Pages)/Resources/Policies/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/Resources/Policies">> = Specific
  const handler = {} as typeof import("../../app/(All Pages)/Resources/Policies/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(All Pages)/Resources/Publications/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/Resources/Publications">> = Specific
  const handler = {} as typeof import("../../app/(All Pages)/Resources/Publications/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(All Pages)/Resources/Reports/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/Resources/Reports">> = Specific
  const handler = {} as typeof import("../../app/(All Pages)/Resources/Reports/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(All Pages)/Resources/Schemes/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/Resources/Schemes">> = Specific
  const handler = {} as typeof import("../../app/(All Pages)/Resources/Schemes/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/">> = Specific
  const handler = {} as typeof import("../../app/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}







// Validate ../../app/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/">> = Specific
  const handler = {} as typeof import("../../app/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}
